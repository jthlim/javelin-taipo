//https://inkeys.wiki/en/keymaps/taipo
const ONESHOT_TIMEOUT = 100;
const TAIPO_TIMEOUT = 50; // after this timeout, the keys are considered sent. Set to -1 to change this to on release

// Usage pressTaipoX(0) //0 = left, 1 = right

// Binary of pressed keys
// Order:
// InnerOuter RSNI AOTE
var taipoKeysPressedR = 0x0;
var taipoKeysCurrentlyPressedR = 0x0; // Keys that are currently being held down, used to check if any keys are being held down

var taipoKeysPressedL = 0x0;
var taipoKeysCurrentlyPressedL = 0x0; // Keys that are currently being held down, used to check if any keys are being held down

func pressTaipoBitMask(side, bitmask) { 
  if (side == 0) {
    taipoKeysPressedL = taipoKeysPressedL | bitmask; // Set bit
    taipoKeysCurrentlyPressedL = taipoKeysCurrentlyPressedL | bitmask;
  } else {
    taipoKeysPressedR = taipoKeysPressedR | bitmask; // Set bit
    taipoKeysCurrentlyPressedR = taipoKeysCurrentlyPressedR | bitmask;
  }
  taipoLayerPress(side);
}

func releaseTaipoBitMask(side, bitmask) { 
  if (side == 0) {
    taipoKeysCurrentlyPressedL = taipoKeysCurrentlyPressedL & ~bitmask; // Clear bit
  } else {
    taipoKeysCurrentlyPressedR = taipoKeysCurrentlyPressedR & ~bitmask; // Clear bit
  }
  taipoLayerRelease(side);
}

// RSNI
func pressTaipoInner(side) {
  pressTaipoBitMask(side, (1 << 9));
}

func releaseTaipoInner(side) {
  releaseTaipoBitMask(side, (1 << 9)); // Clear bit position 9 (Inner)
}


func pressTaipoOuter(side) {
  pressTaipoBitMask(side, (1 << 8)); // Bit position 8 (Outer)
}

func releaseTaipoOuter(side) {
  releaseTaipoBitMask(side, (1 << 8)); // Clear bit position 9 (Outer)
}


func pressTaipoR(side) {
  pressTaipoBitMask(side, (1 << 7)); // Bit position 7 (R)
}

func releaseTaipoR(side) {
  releaseTaipoBitMask(side, (1 << 7)); // Clear bit position 7 (R)
}

func pressTaipoS(side) {
  pressTaipoBitMask(side, (1 << 6)); // Bit position 6 (S)
}

func releaseTaipoS(side) {
  releaseTaipoBitMask(side, (1 << 6)); // Clear bit position 6 (S)
}

func pressTaipoN(side) {
  pressTaipoBitMask(side, (1 << 5)); // Bit position 5 (N)
}

func releaseTaipoN(side) {
  releaseTaipoBitMask(side, (1 << 5)); // Clear bit position 5 (N)
}

func pressTaipoI(side) {
  pressTaipoBitMask(side, (1 << 4)); // Bit position 4 (I)
}

func releaseTaipoI(side) {
  releaseTaipoBitMask(side, (1 << 4)); // Clear bit position 4 (I)
}

// AOTE

func pressTaipoA(side) {
  pressTaipoBitMask(side, (1 << 3)); // Bit position 3 (A)
}

func releaseTaipoA(side) {
  releaseTaipoBitMask(side, (1 << 3)); // Clear bit position 3 (A)
}

func pressTaipoO(side) {
  pressTaipoBitMask(side, (1 << 2)); // Bit position 2 (O)
}

func releaseTaipoO(side) {
  releaseTaipoBitMask(side, (1 << 2)); // Clear bit position 2 (O)
}

func pressTaipoT(side) {
  pressTaipoBitMask(side, (1 << 1)); // Bit position 1 (T)
}

func releaseTaipoT(side) {
  releaseTaipoBitMask(side, (1 << 1)); // Clear bit position 1 (T)
}

func pressTaipoE(side) {
  pressTaipoBitMask(side, (1 << 0)); // Bit position 0 (E)
}

func releaseTaipoE(side) {
  releaseTaipoBitMask(side, (1 << 0)); // Clear bit position 0 (E)
}

// runs when a key is released
func taipoLayerRelease(side) {
  var taipoKeysPressed;
  var taipoKeysCurrentlyPressed;

  if (side == 0) {
    taipoKeysPressed = taipoKeysPressedL;
    taipoKeysCurrentlyPressed = taipoKeysCurrentlyPressedL;
  } else {
    taipoKeysPressed = taipoKeysPressedR;
    taipoKeysCurrentlyPressed = taipoKeysCurrentlyPressedR;
  }

  taipoOneshotUpdate(side);
  if (TAIPO_TIMEOUT == -1) {
    // Only trigger key update when no keys pressed(key release)
    if (taipoKeysCurrentlyPressed != 0) {return;}
    taipoKeysUpdate(side);
  }
}

func taipoLayerPress(side) {
  if (side == 0) {
    stopTimer(49173);
    startTimer(49173 /* random number */, ONESHOT_TIMEOUT, 0 /* is repeating */, @ { taipoOneshotUpdate(0); });
  } else { // side = 1
    stopTimer(64673);
    startTimer(64673 /* random number */, ONESHOT_TIMEOUT, 0 /* is repeating */, @ { taipoOneshotUpdate(1); });
  }

  if (TAIPO_TIMEOUT != -1) {
    // trigger after timeout
    if (side == 0) {
      stopTimer(07532);
      startTimer(07532 /* random number */, TAIPO_TIMEOUT, 0 /* is repeating */, @ { taipoKeysUpdate(0); });
    } else { // side = 1
      stopTimer(24584);
      startTimer(24584 /* random number */, TAIPO_TIMEOUT, 0 /* is repeating */, @ { taipoKeysUpdate(1); });
    }
  }
}

// Presses keys on trigger
func taipoKeysUpdate(side) {
  var taipoKeysPressed;
  var taipoKeysCurrentlyPressed;

  if (side == 0) {
    taipoKeysPressed = taipoKeysPressedL;
    taipoKeysCurrentlyPressed = taipoKeysCurrentlyPressedL;
  } else {
    taipoKeysPressed = taipoKeysPressedR;
    taipoKeysCurrentlyPressed = taipoKeysCurrentlyPressedR;
  }

  printValue("taipoKeysCurrentlyPressed", taipoKeysCurrentlyPressed);

  if (taipoKeysPressed == getTaipoBitmap("RS")) sendText("b");
  if (taipoKeysPressed == getTaipoBitmap("R")) sendText("r");
  if (taipoKeysPressed == getTaipoBitmap("S")) sendText("s");
  if (taipoKeysPressed == getTaipoBitmap("1S")) sendText("S");

  
  if (side == 0) { // reset
    taipoKeysPressedL = 0;
  } else {
    taipoKeysPressedR = 0;
  }
}

func taipoCheckOneshot(side, bitmap, excludeBitmap) var{
  var taipoKeysPressed;
  var taipoKeysCurrentlyPressed;
  if (side == 0) {
    taipoKeysPressed = taipoKeysPressedL;
    taipoKeysCurrentlyPressed = taipoKeysCurrentlyPressedL;
  } else {
    taipoKeysPressed = taipoKeysPressedR;
    taipoKeysCurrentlyPressed = taipoKeysCurrentlyPressedR;
  }

  var oneshot = (taipoKeysCurrentlyPressed & bitmap) == bitmap; // Check if keys held down
  oneshot = oneshot && !(taipoKeysCurrentlyPressed & excludeBitmap); // Check that no excluded keys are held down
  return oneshot;
}

// Update oneshot keys EX modifiers, arrow keys, etc
func taipoOneshotUpdate(side) {
  var taipoKeysPressed;
  var taipoKeysCurrentlyPressed;
  if (side == 0) {
    taipoKeysPressed = taipoKeysPressedL;
    taipoKeysCurrentlyPressed = taipoKeysCurrentlyPressedL;
  } else {
    taipoKeysPressed = taipoKeysPressedR;
    taipoKeysCurrentlyPressed = taipoKeysCurrentlyPressedR;
  }

  // Format (taipoCheckOneshot(side, getTaipoBitmap("Keys"), getTaipoBitmap("Excluded keys")))
  // This allows for multiple to be pressed at the same time
  if (taipoCheckOneshot(side, getTaipoBitmap("RA"), getTaipoBitmap("12"))) { // GUI 
    pressScanCode(0xe3); // SC_L_META
  } else if (!taipoCheckOneshot(!side, getTaipoBitmap("RA"), getTaipoBitmap("12"))){ // Release if other side not being held down
    releaseScanCode(0xe3); // SC_L_META
  }

  if (taipoCheckOneshot(side, getTaipoBitmap("RA1"), getTaipoBitmap("2"))) { // LEFT 
    pressScanCode(0x50); // SC_LEFT
  } else if (!taipoCheckOneshot(!side, getTaipoBitmap("RA1"), getTaipoBitmap("2"))){
    releaseScanCode(0x50); // SC_LEFT
  }

  if (taipoCheckOneshot(side, getTaipoBitmap("RA2"), getTaipoBitmap("1"))) { // PAGEUP 
    pressScanCode(0x4b); // SC_PAGE_UP
  } else if (!taipoCheckOneshot(!side, getTaipoBitmap("RA2"), getTaipoBitmap("1"))){
    releaseScanCode(0x4b); // SC_PAGE_UP
  }


  if (taipoCheckOneshot(side, getTaipoBitmap("SO"), getTaipoBitmap("12"))) { // ALT 
    pressScanCode(0xe2); // SC_L_ALT
  } else if (!taipoCheckOneshot(!side, getTaipoBitmap("SO"), getTaipoBitmap("12"))){
    releaseScanCode(0xe2); // SC_L_ALT
  }

  if (taipoCheckOneshot(side, getTaipoBitmap("SO1"), getTaipoBitmap("2"))) { // DOWN 
    pressScanCode(0x51); // SC_DOWN
  } else if (!taipoCheckOneshot(!side, getTaipoBitmap("SO1"), getTaipoBitmap("2"))){
    releaseScanCode(0x51); // SC_DOWN
  }

  if (taipoCheckOneshot(side, getTaipoBitmap("SO2"), getTaipoBitmap("1"))) { // HOME 
    pressScanCode(0x4a); // SC_HOME
  } else if (!taipoCheckOneshot(!side, getTaipoBitmap("SO2"), getTaipoBitmap("1"))){
    releaseScanCode(0x4a); // SC_HOME
  }


  if (taipoCheckOneshot(side, getTaipoBitmap("NT"), getTaipoBitmap("12"))) { // CTRL 
    pressScanCode(0xe0); // SC_L_CTRL
  } else if (!taipoCheckOneshot(!side, getTaipoBitmap("NT"), getTaipoBitmap("12"))){
    releaseScanCode(0xe0); // SC_L_CTRL
  }

  if (taipoCheckOneshot(side, getTaipoBitmap("NT1"), getTaipoBitmap("2"))) { // UP 
    pressScanCode(0x52); // SC_UP
  } else if (!taipoCheckOneshot(!side, getTaipoBitmap("NT1"), getTaipoBitmap("2"))){
    releaseScanCode(0x52); // SC_UP
  }

  if (taipoCheckOneshot(side, getTaipoBitmap("NT2"), getTaipoBitmap("1"))) { // END 
    pressScanCode(0x4d); // SC_END
  } else if (!taipoCheckOneshot(!side, getTaipoBitmap("NT2"), getTaipoBitmap("1"))){
    releaseScanCode(0x4d); // SC_END
  }

  if (taipoCheckOneshot(side, getTaipoBitmap("IE"), getTaipoBitmap("12"))) { // SHIFT 
    pressScanCode(0xe1); // SC_L_SHIFT
  } else if (!taipoCheckOneshot(!side, getTaipoBitmap("IE"), getTaipoBitmap("12"))){
    releaseScanCode(0xe1); // SC_L_SHIFT
  }

  if (taipoCheckOneshot(side, getTaipoBitmap("IE1"), getTaipoBitmap("2"))) { // RIGHT 
    pressScanCode(0x4f); // SC_RIGHT
  } else if (!taipoCheckOneshot(!side, getTaipoBitmap("IE1"), getTaipoBitmap("2"))){
    releaseScanCode(0x4f); // SC_RIGHT
  }

  if (taipoCheckOneshot(side, getTaipoBitmap("IE2"), getTaipoBitmap("1"))) { // PAGEDOWN 
    pressScanCode(0x4e); // SC_PAGE_DOWN
  } else if (!taipoCheckOneshot(!side, getTaipoBitmap("IE2"), getTaipoBitmap("1"))){
    releaseScanCode(0x4e); // SC_PAGE_DOWN
  }
}

// Input:
// 01 = Thumb buttons
// RSNIAOTE = buttons
// 01RS // example input
func getTaipoBitmap(string) var{
  var i = 0;
  var bitmap = 0;
  while (string[i] != 0){
    if (string[i] == "1"[0]) { // when using an index, it converts the string to decimal, so need to convert other string into decimal too
      bitmap = bitmap | (1 << 9);
    } else if (string[i] == "2"[0]) {
      bitmap = bitmap | (1 << 8);
    } else if (string[i] == "R"[0]) {
      bitmap = bitmap | (1 << 7);
    } else if (string[i] == "S"[0]) {
      bitmap = bitmap | (1 << 6);
    } else if (string[i] == "N"[0]) {
      bitmap = bitmap | (1 << 5);
    } else if (string[i] == "I"[0]) {
      bitmap = bitmap | (1 << 4);
    } else if (string[i] == "A"[0]) {
      bitmap = bitmap | (1 << 3);
    } else if (string[i] == "O"[0]) {
      bitmap = bitmap | (1 << 2);
    } else if (string[i] == "T"[0]) {
      bitmap = bitmap | (1 << 1);
    } else if (string[i] == "E"[0]) {
      bitmap = bitmap | (1 << 0);
    } 
    
    i = i+1;
  }
  return bitmap;
}